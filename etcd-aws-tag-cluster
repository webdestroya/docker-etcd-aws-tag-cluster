#! /bin/bash
pkg="etcd-aws-tag-cluster"
version="0.5"
etcd_peers_file_path="/etc/sysconfig/etcd-peers"
region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq --raw-output .region)
if [[ ! $region ]]; then
  echo "$pkg: failed to get region"
  exit 1
fi

tag_key=${AWS_CLUSTER_TAG_KEY-EtcdClusterName}
tag_value=${AWS_CLUSTER_TAG_VALUE?"is required"}
on_missing_tag=${AWS_CLUSTER_ON_MISSING_TAG-proxy}
proxy_type=${AWS_CLUSTER_PROXY_TYPE-on}
fail_on_bad_peer_error=${FAIL_ON_BAD_PEER_REMOVAL_ERROR-true}
fail_on_join_cluster_error=${FAIL_ON_JOIN_CLUSTER_ERROR-true}

# Sometimes the metadata service times out
aws configure set metadata_service_timeout 8
aws configure set metadata_service_num_attempts 10

# ETCD API https://coreos.com/etcd/docs/2.0.11/other_apis.html
add_ok=201
already_added=409
delete_ok=204

#if the script has already run just exit
if [ -f "$etcd_peers_file_path" ]; then
  echo "$pkg: etcd-peers file $etcd_peers_file_path already created, exiting"
  exit 0
fi

ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
if [[ ! $ec2_instance_id ]]; then
  echo "$pkg: failed to get instance id from instance metadata"
  exit 2
fi

ec2_instance_ip=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
if [[ ! $ec2_instance_ip ]]; then
  echo "$pkg: failed to get instance IP address"
  exit 3
fi

etcd_peer_urls=$(aws ec2 describe-instances --region $region --filters Name=tag:${tag_key},Values=${tag_value} Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances | map("http://" + .NetworkInterfaces[].PrivateIpAddress + ":2379")[]')
if [[ ! $etcd_peer_urls ]]; then
  echo "$pkg: unable to find members of auto scaling group"
  exit 5
fi

echo "etcd_peer_urls=$etcd_peer_urls"

etcd_existing_peer_urls=
etcd_existing_peer_names=
etcd_good_member_url=

for url in $etcd_peer_urls; do
  case "$url" in
      *$ec2_instance_ip*) continue;;
  esac

  etcd_members=$(curl -f -s $url/v2/members)

  if [[ $? == 0 && $etcd_members ]]; then
    etcd_good_member_url="$url"
    echo "etcd_members=$etcd_members"
    etcd_existing_peer_urls=$(echo "$etcd_members" | jq --raw-output .[][].peerURLs[0])
    etcd_existing_peer_names=$(echo "$etcd_members" | jq --raw-output .[][].name)
    break
  fi
done

echo "etcd_good_member_url=$etcd_good_member_url"
echo "etcd_existing_peer_urls=$etcd_existing_peer_urls"
echo "etcd_existing_peer_names=$etcd_existing_peer_names"

this_instance_in_group=$(aws ec2 describe-instances --region $region --filters Name=tag:${tag_key},Values=${tag_value} Name=instance-id,Values=${ec2_instance_id} | jq --raw-output '.Reservations[]')
if [[ ! $this_instance_in_group ]]; then
  echo "missing EC2 tag for this cluster, assuming '$on_missing_tag' mode"

  if [[ "$on_missing_tag" == "proxy" ]]; then
    etcd_initial_cluster=$(aws ec2 describe-instances --region $region --filters Name=tag:${tag_key},Values=${tag_value} Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances | map(.InstanceId + "=http://" + .NetworkInterfaces[].PrivateIpAddress + ":2380")[]' | xargs | sed 's/  */,/g')
    echo "etcd_initial_cluster=$etcd_initial_cluster"
    cat > "$etcd_peers_file_path" <<EOF
ETCD_INITIAL_CLUSTER_STATE=existing
ETCD_NAME=$ec2_instance_id
ETCD_PROXY=$proxy_type
ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
EOF
    exit 0;
  fi
fi




# if I am already listed as a member of the cluster assume that this is a new cluster
if [[ $etcd_existing_peer_urls && $etcd_existing_peer_names != *"$ec2_instance_id"* ]]; then
    echo "joining existing cluster"


    # eject bad members from cluster
    peer_regexp=$(echo "$etcd_peer_urls" | sed 's/^.*http:\/\/\([0-9.]*\):[0-9]*.*$/contains(\\"\1\\")/' | xargs | sed 's/  */ or /g')
    if [[ ! $peer_regexp ]]; then
        echo "$pkg: failed to create peer regular expression"
        exit 6
    fi

    echo "peer_regexp=$peer_regexp"
    bad_peer=$(echo "$etcd_members" | jq --raw-output ".[] | map(select(.peerURLs[] | $peer_regexp | not )) | .[].id")
    echo "bad_peer=$bad_peer"

    if [[ $bad_peer ]]; then
      for bp in $bad_peer; do
        echo "removing bad peer $bp"
        status=$(curl -f -s -w %{http_code} "$etcd_good_member_url/v2/members/$bp" -XDELETE)
        if [[ $status != $delete_ok ]]; then
          echo "$pkg: ERROR: failed to remove bad peer: $bad_peer, return code $status."

          # Only fail out if explicitly told to do so
          if [[ $fail_on_bad_peer_error == "true" ]]; then
            exit 7;
          fi
        fi
      done
    fi

    etcd_initial_cluster=$(curl -s -f "$etcd_good_member_url/v2/members" | jq --raw-output '.[] | map(.name + "=" + .peerURLs[0]) | .[]' | xargs | sed 's/  */,/g')$(echo ",$ec2_instance_id=http://${ec2_instance_ip}:2380")
    echo "etcd_initial_cluster=$etcd_initial_cluster"
    if [[ ! $etcd_initial_cluster ]]; then
      echo "$pkg: docker command to get etcd peers failed"
      exit 8
    fi

    # join an existing cluster
    echo "adding instance ID $ec2_instance_id with IP $ec2_instance_ip"
    status=$(curl -f -s -w %{http_code} -o /dev/null -XPOST "$etcd_good_member_url/v2/members" -H "Content-Type: application/json" -d "{\"peerURLs\": [\"http://$ec2_instance_ip:2380\"], \"name\": \"$ec2_instance_id\"}")
    if [[ $status != $add_ok && $status != $already_added ]]; then
      echo "$pkg: unable to add $ec2_instance_ip to the cluster: return code $status."

      if [[ $fail_on_join_cluster_error == "true" ]]; then
    	  exit 9
      fi
    fi

    cat > "$etcd_peers_file_path" <<EOF
ETCD_INITIAL_CLUSTER_STATE=existing
ETCD_NAME=$ec2_instance_id
ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
EOF

else
    # create a new cluster
    echo "creating new cluster"

    etcd_initial_cluster=$(aws ec2 describe-instances --region $region --filters Name=tag:${tag_key},Values=${tag_value} Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances | map(.InstanceId + "=http://" + .NetworkInterfaces[].PrivateIpAddress + ":2380")[]' | xargs | sed 's/  */,/g')
    echo "etcd_initial_cluster=$etcd_initial_cluster"
    if [[ ! $etcd_initial_cluster ]]; then
      echo "$pkg: unable to get peers from auto scaling group"
      exit 10
    fi

    cat > "$etcd_peers_file_path" <<EOF
ETCD_INITIAL_CLUSTER_STATE=new
ETCD_NAME=$ec2_instance_id
ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
EOF
fi

exit 0
